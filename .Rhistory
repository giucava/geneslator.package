devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
con <- DBI::dbConnect(RSQLite::SQLite(), system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
DBI::dbListTables(con)
query <-"SELECT * FROM mgeneslator WHERE SYMBOL = 'Pzp'"
result <- DBI::dbGetQuery(con, query)
#devtools::test()
detach("package:Geneslator", unload = TRUE)
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
unloadNamespace("Geneslator")
#devtools::test()
detach("package:Geneslator", unload = TRUE)
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
remove.packages("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
#devtools::test()
detach("package:Geneslator", unload = TRUE)
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
con <- DBI::dbConnect(RSQLite::SQLite(), system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
DBI::dbListTables(con)
query <-"SELECT * FROM mgeneslator WHERE SYMBOL = 'Pzp'"
result <- DBI::dbGetQuery(con, query)
View(result)
list <- "Ptp4a1"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
#Test
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
View(result)
View(res)
list <- c("ENSMUSG00000117310","ENSMUSG00000026064")
res <- conversion_id_genes_mouse(list, "ENSEMBL",c("ENSEMBL","SYMBOL"))
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
View(filtered_result)
#07/02/2024####
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
#07/02/2024####
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
remove.packages("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
#07/02/2024####
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
gc()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
search(Geneslator)
search("Geneslator")
#07/02/2024####
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
con <- DBI::dbConnect(RSQLite::SQLite(), system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
DBI::dbListTables(con)
query <-"SELECT * FROM mgeneslator WHERE SYMBOL = 'Pzp'"
result <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
#Test
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
View(result)
View(result)
sqlite_path <- system.file("extdata", "mgeneslator.sqlite", package = "Geneslator")
print(sqlite_path)  # Controlla se il percorso Ã¨ corretto e punta alla versione aggiornata
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
remove.packages("Geneslator")
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
con <- DBI::dbConnect(RSQLite::SQLite(), system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
DBI::dbListTables(con)
query <-"SELECT * FROM mgeneslator WHERE SYMBOL = 'Pzp'"
result <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
View(filtered_result)
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID")
res <- conversion_id_genes_mouse(list, keyid, outputid)
View(result)
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID")
res <- conversion_id_genes_mouse(list, keyid, outputid)
View(result)
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID")
res <- conversion_id_genes_mouse(list, keyid, outputid)
#Test
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID")
res <- conversion_id_genes_mouse(list, keyid, outputid)
print(system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
remove.packages("Geneslator")
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
con <- DBI::dbConnect(RSQLite::SQLite(), system.file("extdata", "mgeneslator.sqlite", package = "Geneslator"))
DBI::dbListTables(con)
query <-"SELECT * FROM mgeneslator WHERE SYMBOL = 'Pzp'"
result <- DBI::dbGetQuery(con, query)
DBI::dbDisconnect(con)
#Test
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID")
res <- conversion_id_genes_mouse(list, keyid, outputid)
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
View(res)
list <- c("ENSMUSG00000117310","ENSMUSG00000026064")
res <- conversion_id_genes_mouse(list, "ENSEMBL",c("ENSEMBL","SYMBOL"))
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
devtools::check(remote = TRUE, manual = TRUE) # non ci devono essere error o warning
devtools::check_rhub() #testa il pacchetto su + sistemi operativi
devtools::check_win_release() #solo su window
library(Geneslator)
devtools::document()
library(devtools)
devtools::document()
devtools::document()
devtools::document()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
devtools::document()
devtools::document()
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
#07/02/2024####
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
conversion_id_genes <- function(list_ensembl, keyid, outputid) {
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns
filtered_table <- table %>%
dplyr::filter(.data[[keyid]] %in% list_ensembl) %>%
dplyr::select(dplyr::all_of(outputid)) %>%
dplyr::collect()
return(filtered_table)
}
detach("package:Geneslator", unload = TRUE)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
View(conversion_id_genes)
conversion_id_genes <- function(list_ensembl, keyid, outputid) {
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- DBI::dbListFields(conn, table_name)  # More reliable than colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns using dplyr::%>%
filtered_table <- table %>%
dplyr::filter(.data[[keyid]] %in% list_ensembl) %>%
dplyr::select(dplyr::all_of(outputid)) %>%
dplyr::collect()
return(filtered_table)
}
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
conversion_id_gene2 <- function(list_ensembl, keyid, outputid) {
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- DBI::dbListFields(conn, table_name)  # More reliable than colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns using dplyr::%>%
filtered_table <- table %>%
dplyr::filter(.data[[keyid]] %in% list_ensembl) %>%
dplyr::select(dplyr::all_of(outputid)) %>%
dplyr::collect()
return(filtered_table)
}
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
conversion_id_gene <- function(list_ensembl, keyid, outputid) {
library(dplyr)
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- DBI::dbListFields(conn, table_name)  # More reliable than colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns using dplyr::%>%
filtered_table <- table %>%
dplyr::filter(.data[[keyid]] %in% list_ensembl) %>%
dplyr::select(dplyr::all_of(outputid)) %>%
dplyr::collect()
return(filtered_table)
}
filtered_result <- conversion_id_genes2(list_ensembl, keyid, outputid)
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
library(magrittr)
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
library(dplyr)
detach("package:dplyr", unload = TRUE)
detach("package:magrittr", unload = TRUE)
conversion_id_gene <- function(list_ensembl, keyid, outputid) {
#library(magrittr)
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- DBI::dbListFields(conn, table_name)  # More reliable than colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns using dplyr::%>%
filtered_table <- table %>%
dplyr::filter(.data[[keyid]] %in% list_ensembl) %>%
dplyr::select(dplyr::all_of(outputid)) %>%
dplyr::collect()
return(filtered_table)
}
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
conversion_id_gene <- function(list_ensembl, keyid, outputid) {
#library(magrittr)
# Define the table name
table_name <- "geneslator"
# Get the path to the SQLite database included in the package
sqlite_path <- system.file("extdata", "geneslator.sqlite", package = "Geneslator")
# Check if the database file exists
if (sqlite_path == "") {
stop("The SQLite database file was not found. Ensure it is included in the package under inst/extdata/")
}
# Connect to the SQLite database
conn <- DBI::dbConnect(RSQLite::SQLite(), sqlite_path)
on.exit(DBI::dbDisconnect(conn), add = TRUE)  # Ensure the connection is closed after execution
# Check if the specified table exists in the database
tables <- DBI::dbListTables(conn)
if (!table_name %in% tables) {
stop("Table '", table_name, "' does not exist in the database.")
}
# Load the table using dbplyr
table <- dplyr::tbl(conn, table_name)
# Check if the keyid column exists in the database
db_columns <- DBI::dbListFields(conn, table_name)  # More reliable than colnames(table)
if (!(keyid %in% db_columns)) {
stop("Column '", keyid, "' not found in the database table.")
}
# Check if the requested output columns exist in the database
missing_cols <- setdiff(outputid, db_columns)
if (length(missing_cols) > 0) {
stop("The following columns do not exist in the database: ", paste(missing_cols, collapse = ", "))
}
# Apply filtering and select the requested columns using dplyr::%>%
filtered_table <- table |>
dplyr::filter(.data[[keyid]] %in% list_ensembl) |>
dplyr::select(dplyr::all_of(outputid)) |>
dplyr::collect()
return(filtered_table)
}
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
library(dplyr)
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
print(conversion_id_genes)
devtools::document()
rm(list = c("conversion_id_genes"))
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
detach("package:dplyr", unload = TRUE)
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
devtools::document()
devtools::build()
devtools::document()
devtools::build()
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
detach("package:Geneslator", unload = TRUE) #se ho caricato il pacchetto, prima devo fare questo.
unloadNamespace("Geneslator")
#Fai un commit su github
devtools::install_github("giucava/geneslator.package", force=T)
library(Geneslator)
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
list_ensembl <- c("ENSG00000139618", "ENSG00000157764")
keyid <- "ENSEMBL"
outputid <- c("ENSEMBL", "SYMBOL","Alias")
filtered_result <- conversion_id_genes(list_ensembl, keyid, outputid)
View(filtered_result)
list <- "Pzp"
keyid <- "SYMBOL"
outputid <- c("ENSEMBL", "SYMBOL", "Gene.type", "ENTREZID","Alias")
res <- conversion_id_genes_mouse(list, keyid, outputid)
View(res)
